import { CustomerService } from '../../service/services/customer.service';
import { CreateCustomerDto } from '../dto/customer/create-customer.dto';
import { UpdateCustomerDto } from '../dto/customer/update-customer.dto';
import { PaymentSlipService } from '../../service/services/payment-slip.service';
import { IspService } from 'src/service/services/isp.service';
export declare class CustomerController {
    private readonly ispService;
    private readonly customerService;
    private readonly paymentSlipService;
    constructor(ispService: IspService, customerService: CustomerService, paymentSlipService: PaymentSlipService);
    create(createCustomerDto: CreateCustomerDto): Promise<{
        paymentSlips: any;
        id: number;
        šifra: number;
        naziv: string;
        obveza: any;
        iznos_opreme: any;
        adresa: string;
        država: string;
        pošta: number;
        mjesto: string;
        porezni_obveznik: string;
        oib: number;
        matični_broj: number;
        šifra_djelatnosti: string;
        identifikacijski_broj: number;
        novčana_jedinica: string;
        dani_za_dospijeće: string;
        postotak_rabata: string;
        internet_stranica: string;
        transakcijski_račun: string;
        ime_prezime_kontakta: string;
        telefon: string;
        elektronska_pošta: string;
        naziv_za_slanje: string;
        adresa_za_slanje: string;
        država_za_slanje: string;
        pošta_za_slanje: string;
        mjesto_pošte_za_slanje: string;
        naziv_primatelja: string;
        adresa_primatelja: string;
        država_primatelja: string;
        pošta_primatelja: string;
        mjesto_primatelja: string;
        inserted_at: Date;
        updated_at: Date;
    }>;
    findAll(options: Record<string, unknown>): Promise<any[]>;
    findOne(id: string): Promise<{
        paymentSlips: any;
        id: number;
        šifra: number;
        naziv: string;
        obveza: any;
        iznos_opreme: any;
        adresa: string;
        država: string;
        pošta: number;
        mjesto: string;
        porezni_obveznik: string;
        oib: number;
        matični_broj: number;
        šifra_djelatnosti: string;
        identifikacijski_broj: number;
        novčana_jedinica: string;
        dani_za_dospijeće: string;
        postotak_rabata: string;
        internet_stranica: string;
        transakcijski_račun: string;
        ime_prezime_kontakta: string;
        telefon: string;
        elektronska_pošta: string;
        naziv_za_slanje: string;
        adresa_za_slanje: string;
        država_za_slanje: string;
        pošta_za_slanje: string;
        mjesto_pošte_za_slanje: string;
        naziv_primatelja: string;
        adresa_primatelja: string;
        država_primatelja: string;
        pošta_primatelja: string;
        mjesto_primatelja: string;
        inserted_at: Date;
        updated_at: Date;
    }>;
    update(id: string, updateCustomerDto: UpdateCustomerDto): Promise<{
        paymentSlips: any;
        id: number;
        šifra: number;
        naziv: string;
        obveza: any;
        iznos_opreme: any;
        adresa: string;
        država: string;
        pošta: number;
        mjesto: string;
        porezni_obveznik: string;
        oib: number;
        matični_broj: number;
        šifra_djelatnosti: string;
        identifikacijski_broj: number;
        novčana_jedinica: string;
        dani_za_dospijeće: string;
        postotak_rabata: string;
        internet_stranica: string;
        transakcijski_račun: string;
        ime_prezime_kontakta: string;
        telefon: string;
        elektronska_pošta: string;
        naziv_za_slanje: string;
        adresa_za_slanje: string;
        država_za_slanje: string;
        pošta_za_slanje: string;
        mjesto_pošte_za_slanje: string;
        naziv_primatelja: string;
        adresa_primatelja: string;
        država_primatelja: string;
        pošta_primatelja: string;
        mjesto_primatelja: string;
        inserted_at: Date;
        updated_at: Date;
    }>;
    removeAll(): Promise<import("typeorm").DeleteResult>;
    remove(id: string): Promise<import("typeorm").DeleteResult>;
    uploadFile(res: any, file: any): Promise<void>;
}
